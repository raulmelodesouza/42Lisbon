---Basic Commands---

pwd - Current work directory
ls - list files and directories within the current work directory
man - Displays a manual depending on what you need instructions for
Q - returns to the main page
mkdir *Nome da pasta* - Comando Make Directory
ls -l - List files and directories witrh details
ls - la - List all the hidden files
cd *Nome da pasta* - Command to change the directory
CTRL+L - Clears the scren
emacs / nano / vim - Creates a text file
rm -r deletes a file created
touch *nome do arquivo* - Criar arquivos vazios
ls -al - exibe todas as informacoes
cp - copy
rm /path/to/dir/* - deletar tudo no diretorio
rmdir directory/ - Deletar diretorio
comando --h / --help 


---Directory Permissions-----

DRWX

Directory, Read, Write and Execute

 When displaying the files in iTems with the command ls -l, it'll display the groups that have access to it and their respective permissions. For example:

 drwxr-xr-x   4 rmelo-de  2021_lisbon   136 Jan  4 09:11 Desktop

 Users that have access: 
 rmelo-de - Can read, write and execute
 2021_Lisbon - Can read and execute
 All others who are not the users above - Can read and execure


To change the pemirssions we use the comando chmod
u (users) g (group) o (other) a (all)
+ Add
- Remove

chmod o-r Images *This command removes the rights to the group Others to read the directory Images*

R - 4mb
W - 2mb
X - 1mb

Se quiser os 3 - RWX - 4+2+1 = 7
Se quiser soh WX - 2+1 = 3
ETC

0 - 0 = nothing
1 = 1 = execute
2 - 2 - write
3 = 2+1 = W+X
4 = 4 = read
5 = 4+1 = r+x
6 = 4+2 = r+w
7 = 4+2+1 = r+w+x

---More basic commands---

Echo - Displays in the screen what you type after it, if I type echo Hello, Hello will be displayed
Cat - Displays the content of the directory instead of the directory itself
cat -e - Shows additional information
Touch - Modify the last date of access and modification of a file
	touch -t 202101150842 test.txt *Nesse exemplo estamos alterando a data para 15/01/2021 as 8:42*


---Variables---

Declarando uma variavel

var=nulo

echo var *Mostrara o nome da variavel*
echo $var *Mostrara o valor contido na variavel*

Da forma acima sao variaveis locais, assim que soh serao reconehcidas no shell local

Entremos em um subshell sh e tentemos fazer a busca:

sh *comando que entra no subshell*
	echo var
	echo $var *Retornara vazio*
Exit *para sair do subshell*

Ao usar o comando ENV serao mostrados o enviroment do programa e sera possivel perceber que a variavel VAR nao se encontra nesse meio, portando realizemos uma exportacao com o comando EXPORT

EXPORT VAR
ENV *Ao executar esse comando sera exibida a variavel no enviroment do programa executado*
sh
	echo $var *dessa vez o valor da variavel sera exibido na subshell, uma vez que ja foi exportado*

---Buscando informacoes---

Para buscar informacoes de arquivos, podemos escrever todos os nomes para que a informacao seja exibida, da seguinte maneira:

WC test.txt test2.txt test3.txt

Ou entao podemos utilizar um comando para buscar todos os arquivos com a extensao .txt

WC *.txt (Ira trazer todas as informacoes de todos os arquivos txt encontrados)


ECHO *.txt (Buscara todos os nomes dos arquivos com extensao .TXT)

Tambem eh possivel fazer buscar por arquivos que contenham parte da palavra, por exemplo

Arquivos: Test.txt e Test2.txt

(Aqui fazemos uma busca por quaisquer arquivos que comecem com a letra T, independente do resto)

ECHO Te*.txt

ECHO * (Mostra todos os arquivos existentes na pasta)

echo com '' ou "" ou \ serve para exibir o valor desejado
echo "Valor que eu quero", 'Valor que eu quero', V/A/L/O/R



---More, Tail, Head and Grep

MORE eh utilizado para abrir os documentos TXT e manipular o arquivo como se estivesse em um reader, com as setas, barra de espaco, etc. 

Para buscar certas palavaras dentro do MORE, usamos o comando \*Insira aqui a palavra desejada*
De tal forma a que serao exibidas as partes onde se encontram a palava buscada, funciona como ctrl F

HEAD comando utilizado para exibir apenas uma quantidade N de linhas do texto

HEAD -n 2 test.txt
	*O comando acima apenas ira exibir as 2 primeiras linhas do TXT*

O comando tambem pode ser utlizado para trazer apenas os caracteres

HEAD -c 10 test.txt

TAIL eh uma funcao similar a HEAD, porem comeca do final
	TAIL -n 2 test.txt
	TAIL -c 10 test.txt
	*Atencao, ambos -n e -c sao CASE SENSITIVE*

GREP eh uma funcao que retorna as linhas que contenham uma palavra especificada pelo usuario

GREP another Test.txt
	*Somente as linhas que contenham a palavra Another serao retornadas*

GREP -v another Test.txt
	*O comando -v faz a busca reversa, ou seja, retorna tudo que nao contenha a palavra Another*

GREP -i AnOtHeR Test.txt
	*Tal comando faz com que nao seja mais case sensitive, entao nao importa como esteja escritopwecho*


	cat~ /.ssh/id_rsa


---LS e variacoes---

https://www.mkssoftware.com/docs/man1/ls.1.asp


----GIT-----

GIT eh uma funcao que permite que multiplas pessoas trabalhem em um mesmo arquivos sem interferir na funcionalidade das alteracoes uns do outros. Por exemplo, temos um arquivo A, uma pessoa realiza modificacoes criando o arquivo A1, outra pessoa cria o arquivo A2, ao realizarem um COMMIT, as alteracoes de ambos serao salvas e fusionadas, dando origem ao arquivo A3, com ambas as alteracoes adicionadas ao arquivo principal A. Feito para centralizar operacoes.

GIT - Exibe as funcoes disponiveis

git init - Transforma o diretorio em um GIT directory

git status - Mostrara todos os arquivos no seu GIT, estejam eles prontos ou nao para serem enviados a um commit

* Quando criamos arquivos num diretorio GIT, tais arquivos ficam em modo standby, untracked, ou seja, podemos fazer as alteracoes que desejemos neste arquivo e quando sinta que o mesmos e encontra pronto para ser contabilizado, adicionamos ele a fila Commit, da seguinte maneira

touch ArquivoUm

git add ArquivoUm 

* Em seguida, o arquivo ja estara pronto para que sua modificacao seja contabilizada, e assim o faremos com git commit

git commit ArquivoUm -m "Primeiro Commit"

-m serve para detalhes da modificacao, caso nao usemos esse comando, assim que executarmos o git commit ArquivoUm, nos irao pedir que definam o nome de qualquer maneira
rm 

* Agora o arquivo GIT ja nao estara mais na lista ao executar o git status, pois o commit ja foi realizado, portando para vermos os commits ja submetidos, usamos o comando

git log

- Caso qualquer alteracao seja feita no arquivo file1, o comando git status acusara tal mudanca e para vermos oq ue foi modificado usamos gif diff

nano file1
git status
git diff

Depois das modificacoes o git deve ser adicionado novamente, para que depois a transacao seja commit

git commit -m "Second commit"


----Checkout/Branch-----


